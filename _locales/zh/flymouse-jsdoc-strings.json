{
  "flymouse": "StormScience flymouse robot package\r\n@author ArthurZheng",
  "flymouse.calcRGB": "calculate rgb data\r\n@param {number} data - R+G+B data\r\n@return {RGB} rgb - color want to calculate",
  "flymouse.calibrateColorsensor": "calibrate color sensor white balance",
  "flymouse.initPS2": "Initialize ps2 controller and set pins, should run at first.\r\n@param {DigitalPin} dout - DO pin name, eg: DigitalPin.P15\r\n@param {DigitalPin} din - DI pin name, eg: DigitalPin.P14\r\n@param {DigitalPin} clk - CLK pin name, eg: DigitalPin.P13\r\n@param {DigitalPin} cs - CS pin name, eg: DigitalPin.P16",
  "flymouse.ps2ButtonAnalog": "calculate ps2 controller's digital button's state.\r\n@param {DigitalButton} button - digital button name, eg: ps2.DigitalButton.Select\r\n@return {number} digital button's state",
  "flymouse.ps2ButtonDigital": "calculate ps2 controller's digital button's state.\r\n@param {DigitalButton} button - digital button name, eg: ps2.DigitalButton.Select\r\n@return {boolean} digital button's state",
  "flymouse.readBatteryvolt": "read battery volt\r\n@return {nubmer} battery volt",
  "flymouse.readColorsensor": "read color sensor\r\n@return {number} rgb data",
  "flymouse.readIRsensor": "read ir sensors\r\n@param {IRsensor}  ir - sequence number of ir sensors\r\n@return {number} 0 ~ 4095, biger means closer",
  "flymouse.readLightsensor": "read light sensor\r\n@return {number} 0 ~ 4095, bigger means lighter",
  "flymouse.readPS2": "read data from ps2 controller",
  "flymouse.readPowerkey": "read power key\r\n@return {boolean} power key state",
  "flymouse.readSoundsensor": "read sound sensor\r\n@return {number} 0 ~ 4095, bigger means closer",
  "flymouse.readTouchsensor": "read touch sensor\r\n@return {boolean}",
  "flymouse.readTurnsofwheel": "read turns of wheel encoder\r\n@param {Motor}  encoder - sequence number of encoders\r\n@return {number} number of wheel's turns\r\n@note if number of pulse over 0xffff/2 ,the data will be error",
  "flymouse.readUltrasonicsensor": "read ultrasonic sensor\r\n@return {boolean}",
  "flymouse.resetEncoder": "reset encoders",
  "flymouse.setFilllight": "set fill light state\r\n@param {LedState} state - fill light state",
  "flymouse.setMotorbreak": "set motor break",
  "flymouse.setMotorspeed": "set motor speed\r\n@param {Motor} motor - sequence number of motor\r\n@param {number} speed - motor speed -1023~1023",
  "flymouse.setPixelColor": "configure the led by color\r\n@param {number} offset - sequence number of the led\r\n@param {Color} color - color",
  "flymouse.setPixelRGB": "configure the led by RGB value\r\n@param {number} offset - sequence number of the led\r\n@param {number} red - the brightness of red\r\n@param {number} green - the brightness of green\r\n@param {number} blue - the brightness of blue",
  "ps2": "A driver of PS2 wireless controller in MakeCode.\r\n@abstract This program is port from https://github.com/Lynxmotion/Arduino-PS2X, It's a lite version of Arduino-PS2X,\r\ncan only be used in communicate with 2.4G PS2 wireless controller, other ps2 gamepads are not supported. The wareform \r\ncan be referenced from https://store.curiousinventor.com/guides/PS2.\r\n@author ArthurZheng",
  "ps2.buttonAnalog": "return ps2 controller's analog button's value.\r\n@param {AnalogButton} button - analog button name, eg: ps2.AnalogButton.RX\r\n@return {number} analog button's value, range: 0~255, idle: 128",
  "ps2.buttonDigital": "return ps2 controller's digital button's state.\r\n@param {DigitalButton} button - digital button name, eg: ps2.DigitalButton.Select\r\n@return {boolean} digital button's state",
  "ps2.initGamepad": "Initialize ps2 controller and set pins, should run at first.\r\n@param {DigitalPin} dout - DO pin name, eg: DigitalPin.P15\r\n@param {DigitalPin} din - DI pin name, eg: DigitalPin.P14\r\n@param {DigitalPin} clk - CLK pin name, eg: DigitalPin.P13\r\n@param {DigitalPin} cs - CS pin name, eg: DigitalPin.P16\r\n@return {number} 0 no error, 1 cannot communicat with wireless recreceiver, 2 cannot set wireless receiver mode",
  "ps2.readGamepad": "Send and recive data. recive data is store in ps2Data and btData\r\n@param {number} byte - the data to send , eg: 0x00\r\n@return {number} 0 no error, 1 error"
}